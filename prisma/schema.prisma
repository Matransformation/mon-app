generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid()) @db.VarChar(191)
  email                   String                   @unique(map: "utilisateur_email_key") @db.VarChar(191)
  poids                   Float?
  metabolismeCible        Int?
  createdAt               DateTime                 @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  activite                String?                  @db.VarChar(191)
  age                     Int?
  nom                     String?                  @db.VarChar(191)
  photoUrl                String?                  @db.VarChar(191)
  sexe                    String?                  @db.VarChar(191)
  taille                  Int?
  objectifPoids           String?                  @db.VarChar(191)
  emailVerified           DateTime?
  image                   String?                  @db.VarChar(191)
  name                    String?                  @db.VarChar(191)
  password                String?                  @db.VarChar(191)
  role                    String                   @default("user") @db.VarChar(191)
  stripeCurrentPeriodEnd  DateTime?
  stripeCustomerId        String?                  @unique(map: "utilisateur_stripecustomerid_key") @db.VarChar(191)
  stripePriceId           String?                  @db.VarChar(191)
  stripeStatus            String?                  @db.VarChar(191)
  stripeSubscriptionId    String?                  @db.VarChar(191)
  birthdate               DateTime?
  gender                  String?                  @db.VarChar(191)
  phone                   String?                  @db.VarChar(191)
  isSubscribed            Boolean                  @default(false)
  trialEndsAt             DateTime?
  hasAccessToFullContent  Boolean                  @default(false)
  subscriptionEnd         DateTime?
  subscriptionType        String?                  @db.VarChar(191)
  cancelAtPeriodEnd       Boolean                  @default(false)
  accounts                Account[]                @relation("UserAccounts")
  emailVerificationTokens EmailVerificationToken[]
  favoris                 Favori[]
  historiquePoids         HistoriquePoids[]
  mensurations            Mensurations[]
  menuJournaliers         MenuJournalier[]
  passwordResetTokens     PasswordResetToken[]
  repasJournaliers        RepasJournalier[]
  sessions                Session[]                @relation("UserSessions")

  @@map("Utilisateur")
}

model PasswordResetToken {
  id        String   @id @default(cuid()) @db.VarChar(191)
  token     String   @unique(map: "passwordresettoken_token_key") @db.VarChar(191)
  userId    String   @db.VarChar(191)
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id        String   @id @default(cuid()) @db.VarChar(191)
  token     String   @unique(map: "emailverificationtoken_token_key") @db.VarChar(191)
  userId    String   @db.VarChar(191)
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model HistoriquePoids {
  id            String   @id @default(cuid()) @db.VarChar(191)
  date          DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  poids         Float
  utilisateurId String   @db.VarChar(191)
  utilisateur   User     @relation(fields: [utilisateurId], references: [id])

  @@map("HistoriquePoids")
}

model Mensurations {
  id            String   @id @default(cuid()) @db.VarChar(191)
  date          DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  taille        Int?
  hanches       Int?
  cuisses       Int?
  bras          Int?
  tailleAbdo    Int?
  poitrine      Int?
  mollets       Int?
  masseGrasse   Float?
  utilisateurId String   @db.VarChar(191)
  utilisateur   User     @relation(fields: [utilisateurId], references: [id])

  @@map("Mensurations")
}

model Favori {
  id            String  @id @default(cuid()) @db.VarChar(191)
  recetteId     String  @db.VarChar(191)
  utilisateurId String  @db.VarChar(191)
  recette       Recette @relation(fields: [recetteId], references: [id])
  utilisateur   User    @relation(fields: [utilisateurId], references: [id])

  @@map("Favori")
}

model Account {
  id                String  @id @default(cuid()) @db.VarChar(191)
  userId            String  @db.VarChar(191)
  type              String  @db.VarChar(191)
  provider          String  @db.VarChar(191)
  providerAccountId String  @db.VarChar(191)
  refresh_token     String? @db.VarChar(191)
  access_token      String? @db.VarChar(191)
  expires_at        Int?
  token_type        String? @db.VarChar(191)
  scope             String? @db.VarChar(191)
  id_token          String? @db.VarChar(191)
  session_state     String? @db.VarChar(191)
  user              User    @relation("UserAccounts", fields: [userId], references: [id])

  @@unique([provider, providerAccountId], map: "account_provider_provideraccountid_key")
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(191)
  sessionToken String   @unique(map: "session_sessiontoken_key") @db.VarChar(191)
  userId       String   @db.VarChar(191)
  expires      DateTime
  user         User     @relation("UserSessions", fields: [userId], references: [id])

  @@map("Session")
}

model VerificationToken {
  identifier String   @db.VarChar(191)
  token      String   @unique(map: "verificationtoken_token_key") @db.VarChar(191)
  expires    DateTime

  @@unique([identifier, token], map: "verificationtoken_identifier_token_key")
  @@map("VerificationToken")
}

model Recette {
  id               String               @id @default(cuid()) @db.VarChar(191)
  name             String               @db.VarChar(191)
  slug             String               @unique
  description      String?              @db.VarChar(191)
  price            Float?
  timeCook         Int?
  timePrep         Int?
  cookingTime      Int
  photoUrl         String?              @db.VarChar(191)
  preparationTime  Int
  steps            Json                 @db.Json
  createdAt        DateTime             @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  calories         Float?
  carbs            Int?
  fat              Int?
  protein          Float?
  scalable         Boolean              @default(true)
  favoris          Favori[]
  menuJournaliers  MenuJournalier[]
  allowedSides     RecetteAllowedSide[]
  categories       RecetteCategory[]
  ingredients      RecetteIngredient[]
  repasJournaliers RepasJournalier[]
}

model Ingredient {
  id              String               @id @default(cuid()) @db.VarChar(191)
  name            String               @db.VarChar(191)
  calories        Int
  carbs           Int
  fat             Int
  price           Float
  protein         Int
  ingredientType  String?              @db.VarChar(191)
  unit            String               @default("g") @db.VarChar(191)
  accompagnements Accompagnement[]
  sideTypes       IngredientSideType[]
  recettes        RecetteIngredient[]

  @@map("Ingredient")
}

model RecetteIngredient {
  id           String     @id @default(cuid()) @db.VarChar(191)
  recetteId    String     @db.VarChar(191)
  ingredientId String     @db.VarChar(191)
  quantity     Float
  unit         String     @db.VarChar(191)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recette      Recette    @relation(fields: [recetteId], references: [id])

  @@unique([recetteId, ingredientId], map: "recetteingredient_recetteid_ingredientid_key")
}

model Category {
  id        String            @id @default(cuid()) @db.VarChar(191)
  name      String            @unique(map: "category_name_key") @db.VarChar(191)
  createdAt DateTime          @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  recettes  RecetteCategory[]

  @@map("Category")
}

model RecetteCategory {
  id         String   @id @default(cuid()) @db.VarChar(191)
  recetteId  String   @db.VarChar(191)
  categoryId String   @db.VarChar(191)
  category   Category @relation(fields: [categoryId], references: [id])
  recette    Recette  @relation(fields: [recetteId], references: [id])

  @@unique([recetteId, categoryId], map: "recettecategory_recetteid_categoryid_key")
  @@map("RecetteCategory")
}

model RepasJournalier {
  id         String   @id @default(cuid()) @db.VarChar(191)
  date       DateTime
  repasType  String   @db.VarChar(191)
  userId     String   @db.VarChar(191)
  recetteId  String?  @db.VarChar(191)
  customName String?  @db.VarChar(191)
  calories   Int?
  protein    Float?
  fat        Int?
  carbs      Int?
  createdAt  DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  recette    Recette? @relation(fields: [recetteId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model MenuJournalier {
  id              String           @id @default(cuid()) @db.VarChar(191)
  userId          String           @db.VarChar(191)
  date            DateTime
  repasType       String           @db.VarChar(191)
  recetteId       String?          @db.VarChar(191)
  createdAt       DateTime         @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  accompagnements Accompagnement[]
  recette         Recette?         @relation(fields: [recetteId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
}

model RecetteAllowedSide {
  recetteId String  @db.VarChar(191)
  sideType  String
  recette   Recette @relation(fields: [recetteId], references: [id])

  @@id([recetteId, sideType])
}

model IngredientSideType {
  ingredientId String     @db.VarChar(191)
  sideType     String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([ingredientId, sideType])
}

model Accompagnement {
  id           String         @id @default(cuid()) @db.VarChar(191)
  menuId       String         @db.VarChar(191)
  ingredientId String         @db.VarChar(191)
  quantity     Int
  ingredient   Ingredient     @relation(fields: [ingredientId], references: [id])
  menu         MenuJournalier @relation(fields: [menuId], references: [id])

  @@unique([menuId, ingredientId], map: "accompagnement_menuid_ingredientid_key")
}
