import prisma from '../../../lib/prisma'
import { hashPassword } from '../../../lib/auth'
import { randomBytes } from 'crypto'
import { addHours, addDays } from 'date-fns'
import sgMail from '@sendgrid/mail'

sgMail.setApiKey(process.env.SENDGRID_API_KEY)

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'M√©thode non autoris√©e' })
  }

  const { name, email, password, phone, birthdate, gender } = req.body

  if (!email || !password || !name) {
    return res.status(422).json({ message: 'Nom, email et mot de passe requis' })
  }

  try {
    // 1) V√©rifier si l'utilisateur existe d√©j√†
    const existing = await prisma.user.findUnique({ where: { email } })
    if (existing) {
      return res.status(409).json({ message: 'Cet e-mail est d√©j√† utilis√©.' })
    }

    // 2) Hasher le mot de passe et cr√©er l'utilisateur
    const hashed = await hashPassword(password)
    const trialEndsAt = addDays(new Date(), 7) // P√©riode d'essai de 7 jours

    // Log pour d√©bogage de trialEndsAt
    console.log("trialEndsAt:", trialEndsAt.toISOString()) // Log pour v√©rifier la date

    const user = await prisma.user.create({
      data: {
        name,
        email,
        password: hashed,
        phone,
        birthdate: new Date(birthdate),
        sexe: gender,
        trialEndsAt, // Assurer que cette date est correctement d√©finie
        isSubscribed: false, // Par d√©faut, l'utilisateur n'est pas abonn√©
      }
    })

    // Log pour v√©rifier que l'utilisateur a bien √©t√© cr√©√© et que trialEndsAt est bien d√©fini
    console.log("User Created:", user)

    // 3) G√©n√©rer un code de v√©rification (6 chiffres ou lettres)
    const token = randomBytes(3).toString('hex').toUpperCase()
    const expiresAt = addHours(new Date(), 1)

    // Supprimer d'anciens tokens
    await prisma.emailVerificationToken.deleteMany({ where: { userId: user.id } })

    // Cr√©er le token en base
    await prisma.emailVerificationToken.create({
      data: { userId: user.id, token, expiresAt }
    })

    // 4) Envoyer le mail de v√©rification
    const verificationUrl = `${process.env.NEXTAUTH_URL}/verify-email?email=${encodeURIComponent(email)}`
    const html = `
      <p>Bonjour ${name},</p>
      <p>Voici votre code de v√©rification : <strong>${token}</strong></p>
      <p>Il expire dans 1 heure.</p>
      <p>Si vous n‚Äôavez pas demand√© cette inscription, ignorez ce message.</p>
      <p><a href="${verificationUrl}">Cliquez ici</a> pour ouvrir la page de v√©rification.</p>
    `
    await sgMail.send({
      to: email,
      from: process.env.EMAIL_FROM,
      subject: 'üì© V√©rifiez votre adresse email',
      html
    })

    // 5) Succ√®s
    return res.status(201).json({ message: 'Utilisateur cr√©√©. Un email de v√©rification a √©t√© envoy√©.' })
  } catch (err) {
    console.error('Signup error:', err)
    return res.status(500).json({ message: 'Erreur interne', detail: err.message })
  }
}
