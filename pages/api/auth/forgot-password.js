// pages/api/auth/forgot-password.js

import prisma from '../../../lib/prisma'
import { randomBytes } from 'crypto'
import { addHours } from 'date-fns'
import sgMail from '@sendgrid/mail'

sgMail.setApiKey(process.env.SENDGRID_API_KEY)

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'MÃ©thode non autorisÃ©e' })
  }

  const { email } = req.body
  if (!email) {
    return res.status(400).json({ message: 'Email requis' })
  }

  try {
    // 1) VÃ©rifier lâ€™utilisateur
    const user = await prisma.user.findUnique({ where: { email } })

    // Toujours rÃ©pondre 200 pour ne pas divulguer lâ€™existence du compte
    if (!user) {
      return res
        .status(200)
        .json({ message: 'Si lâ€™email existe, un lien a Ã©tÃ© envoyÃ©.' })
    }

    // 2) GÃ©nÃ©rer le token et sa date dâ€™expiration
    const token = randomBytes(32).toString('hex')
    const expiresAt = addHours(new Date(), 1)

    // 3) Supprimer dâ€™Ã©ventuels anciens tokens pour cet utilisateur
    await prisma.passwordResetToken.deleteMany({ where: { userId: user.id } })

    // 4) CrÃ©er un nouveau token en base
    await prisma.passwordResetToken.create({
      data: { userId: user.id, token, expiresAt },
    })

    // 5) Envoyer lâ€™email
    const resetUrl = `${process.env.NEXTAUTH_URL}/reset-password/${token}`
    try {
      await sgMail.send({
        to: email,
        from: process.env.EMAIL_FROM,
        subject: 'ðŸ”’ RÃ©initialisation de votre mot de passe',
        html: `
          <p>Bonjour,</p>
          <p>Vous avez demandÃ© la rÃ©initialisation de votre mot de passe.</p>
          <p>
            Cliquez <a href="${resetUrl}">ici</a> pour en choisir un nouveau.
            Le lien expire dans 1 heure.
          </p>
          <p>Si vous nâ€™Ãªtes pas Ã  lâ€™origine de cette demande, ignorez ce message.</p>
          <br/>
          <p>â€” Lâ€™Ã©quipe MaTransformation</p>
        `,
      })
    } catch (emailError) {
      console.error('SendGrid error details:', JSON.stringify(emailError.response?.body, null, 2))
      return res.status(500).json({
        message: 'Erreur lors de lâ€™envoi de lâ€™email',
        detail: emailError.response?.body || emailError.message,
      })
    }

    return res
      .status(200)
      .json({ message: 'Si lâ€™email existe, un lien a Ã©tÃ© envoyÃ©.' })
  } catch (error) {
    console.error('Erreur forgot-password:', error)
    return res
      .status(500)
      .json({ message: 'Erreur interne du serveur', detail: error.message })
  }
}
